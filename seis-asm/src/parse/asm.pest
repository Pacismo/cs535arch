WHITESPACE = _{ " " | "\t" }

comment = _{ ("//" | ";") ~ (!NEWLINE ~ ANY)* }

program = _{ SOI ~ (line? ~ comment?) ~ (NEWLINE ~ line? ~ comment?)* ~ EOI }

line = _{ constant | instruction | directive | label | datablock }

datablock = @{
    "#" ~ datatype ~ "!" ~ WHITESPACE* ~ "{" ~ NEWLINE* ~ WHITESPACE* ~ (float | integer | string) ~ (NEWLINE* ~ WHITESPACE* ~ "," ~ NEWLINE* ~ WHITESPACE* ~ (float | integer | string))* ~ NEWLINE* ~ WHITESPACE* ~ ","? ~ WHITESPACE* ~ NEWLINE* ~ "}"
}

datatype = ${ ^"string" | type | ^"float" }

constant = {
    const ~ "=" ~ ((float) | (integer) | (char))
}

instruction = {
    controlop
  | integerop
  | floatop
  | registerop
}

directive = {
    "#[" ~ ident ~ ("=" ~ (integer | string))? ~ "]"
}

controlop = _{
    halt
  | nop
  | jmp
  | jsr
  | ret
  | jeq
  | jne
  | jgt
  | jlt
  | jge
  | jle
}

integerop = _{
    add
  | sub
  | mul
  | dvu
  | dvs
  | mod
  | and
  | ior
  | xor
  | not
  | sxt
  | bsl
  | bsr
  | asr
  | rol
  | ror
  | cmp
  | tst
}

floatop = _{
    fadd
  | fsub
  | fmul
  | fdiv
  | fmod
  | fcmp
  | fneg
  | frec
  | itof
  | ftoi
  | fchk
}

registerop = _{
    push
  | pop
  | lbr
  | sbr
  | lsr
  | ssr
  | llr
  | slr
  | tfr
  | ldr
  | load
}

ident = ${ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
label = ${ ident ~ ":" }
const = @{ "." ~ ident }

byte  = ${ ^"byte" }
short = ${ ^"short" }
word  = ${ ^"word" | ^"long" }
type  = _{ byte | short | word }

vareg  = ${ (^"V" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')) }
stareg = ${ ^"SP" | ^"BP" }
lpreg  = ${ ^"LP" }
pcreg  = ${ ^"PC" }
psreg  = ${ ^"ZF" | ^"OF" | ^"EPS" | ^"NAN" | ^"INF" }
spreg  = _{ pcreg | psreg }

reg = _{
    vareg
  | stareg
  | lpreg
}

sign      = ${ "+" | "-" }
dec       = ${ "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
hex       = ${ ^"0x" ~ ASCII_HEX_DIGIT+ }
oct       = ${ "0" ~ ASCII_OCT_DIGIT+ }
integer   = @{ sign? ~ uinteger }
uinteger  = _{ hex | oct | dec }
character = @{
    (!("\\" | "\"") ~ ANY)
  | ("\\" ~ ("\"" | "\\" | "'" | "/" | "n" | "r" | "t"))
}

float  = ${ sign? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT* ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
string = @{ "\"" ~ (!"\"" ~ character)* ~ "\"" }
char   = @{ "'" ~ (!"\'" ~ character) ~ "'" }

zpgaddr = ${ "@" ~ (uinteger | ident) }
zpgref  = ${ "&" ~ (uinteger | ident) }

halt = @{ ^"HALT" }
nop  = @{ ^"NOP" }
jmp  = ${ ^"JMP" ~ WHITESPACE+ ~ jump }
jsr  = ${ ^"JSR" ~ WHITESPACE+ ~ jump }
ret  = @{ ^"RET" }
jeq  = ${ (^"JEQ" | ^"JZE") ~ WHITESPACE+ ~ jump }
jne  = ${ (^"JNE" | ^"JNZ") ~ WHITESPACE+ ~ jump }
jgt  = ${ ^"JGT" ~ WHITESPACE+ ~ jump }
jlt  = ${ ^"JLT" ~ WHITESPACE+ ~ jump }
jge  = ${ ^"JGE" ~ WHITESPACE+ ~ jump }
jle  = ${ ^"JLE" ~ WHITESPACE+ ~ jump }

jump     = _{ absolute | relative | ident }
absolute = @{ vareg }
relative = @{ integer }

add = @{ ^"ADD" ~ WHITESPACE+ ~ int_binop }
sub = @{ ^"SUB" ~ WHITESPACE+ ~ int_binop }
mul = @{ ^"MUL" ~ WHITESPACE+ ~ int_binop }
dvu = @{ ^"DVU" ~ WHITESPACE+ ~ int_binop }
dvs = @{ ^"DVS" ~ WHITESPACE+ ~ int_binop }
mod = @{ ^"MOD" ~ WHITESPACE+ ~ int_binop }
and = @{ ^"AND" ~ WHITESPACE+ ~ int_binop }
ior = @{ (^"IOR" | ^"OR") ~ WHITESPACE+ ~ int_binop }
xor = @{ (^"EOR" | ^"XOR") ~ WHITESPACE+ ~ int_binop }
not = @{ ^"NOT" ~ WHITESPACE+ ~ int_unop }
sxt = @{ ^"SXT" ~ WHITESPACE+ ~ type ~ WHITESPACE+ ~ vareg }
bsl = @{ (^"BSL" | ^"ASL") ~ WHITESPACE+ ~ int_binop }
bsr = @{ ^"BSR" ~ WHITESPACE+ ~ int_binop }
asr = @{ ^"ASR" ~ WHITESPACE+ ~ int_binop }
rol = @{ ^"ROL" ~ WHITESPACE+ ~ int_binop }
ror = @{ ^"ROR" ~ WHITESPACE+ ~ int_binop }
cmp = @{ ^"CMP" ~ WHITESPACE+ ~ int_cmpop }
tst = @{ ^"TST" ~ WHITESPACE+ ~ int_cmpop }

int_binop = @{ vareg ~ WHITESPACE* ~ "," ~ WHITESPACE* ~ (vareg | integer | const) ~ WHITESPACE* ~ assign ~ WHITESPACE* ~ vareg }
int_unop  = @{ vareg ~ WHITESPACE* ~ WHITESPACE* ~ assign ~ WHITESPACE* ~ vareg }

sig_flag  = @{ "s" ~ WHITESPACE }
int_cmpop = @{ sig_flag? ~ WHITESPACE* ~ vareg ~ WHITESPACE* ~ "," ~ WHITESPACE* ~ (vareg | integer | const) }

fadd = @{ ^"FADD" ~ WHITESPACE+ ~ float_binop }
fsub = @{ ^"FSUB" ~ WHITESPACE+ ~ float_binop }
fmul = @{ ^"FMUL" ~ WHITESPACE+ ~ float_binop }
fdiv = @{ ^"FDIV" ~ WHITESPACE+ ~ float_binop }
fmod = @{ ^"FMOD" ~ WHITESPACE+ ~ float_binop }
fcmp = @{ ^"FCMP" ~ WHITESPACE+ ~ float_cmpop }
fneg = @{ ^"FNEG" ~ WHITESPACE+ ~ float_unop }
frec = @{ ^"FREC" ~ WHITESPACE+ ~ float_unop }
itof = @{ ^"ITOF" ~ WHITESPACE+ ~ float_unop }
ftoi = @{ ^"FTOI" ~ WHITESPACE+ ~ float_unop }
fchk = @{ ^"FCHK" ~ WHITESPACE+ ~ vareg }

float_cmpop = @{ vareg ~ WHITESPACE* ~ "," ~ WHITESPACE* ~ vareg }
float_binop = @{ vareg ~ WHITESPACE* ~ "," ~ WHITESPACE* ~ vareg ~ WHITESPACE* ~ assign ~ WHITESPACE* ~ vareg }
float_unop  = @{ vareg ~ WHITESPACE* ~ assign ~ WHITESPACE* ~ vareg }

push = @{ ^"PUSH" ~ WHITESPACE+ ~ regstack }
pop  = @{ ^"POP" ~ WHITESPACE+ ~ regstack }

regstack = ${ "{" ~ WHITESPACE* ~ reg ~ WHITESPACE* ~ ("," ~ WHITESPACE* ~ reg)* ~ WHITESPACE* ~ "}" }

lbr = @{ ^"LBR" ~ WHITESPACE+ ~ loadsrc ~ WHITESPACE* ~ (volassign | assign) ~ WHITESPACE* ~ vareg }
sbr = @{ ^"SBR" ~ WHITESPACE+ ~ vareg ~ WHITESPACE* ~ (volassign | assign) ~ WHITESPACE* ~ loadsrc }
lsr = @{ ^"LSR" ~ WHITESPACE+ ~ loadsrc ~ WHITESPACE* ~ (volassign | assign) ~ WHITESPACE* ~ vareg }
ssr = @{ ^"SSR" ~ WHITESPACE+ ~ vareg ~ WHITESPACE* ~ (volassign | assign) ~ WHITESPACE* ~ loadsrc }
llr = @{ ^"LLR" ~ WHITESPACE+ ~ loadsrc ~ WHITESPACE* ~ (volassign | assign) ~ WHITESPACE* ~ vareg }
slr = @{ ^"SLR" ~ WHITESPACE+ ~ vareg ~ WHITESPACE* ~ (volassign | assign) ~ WHITESPACE* ~ loadsrc }

loadsrc   = @{ zpgaddr | offsetind | indexind | vareg | stackoff }
offsetind = ${ vareg ~ WHITESPACE* ~ "+" ~ WHITESPACE* ~ uinteger }
indexind  = ${ vareg ~ WHITESPACE* ~ "[" ~ WHITESPACE* ~ vareg ~ WHITESPACE* ~ "]" }
stackoff  = ${ "%" ~ uinteger }

/// `TFT reg => reg`
tfr = @{ ^"TFR" ~ WHITESPACE+ ~ (reg | spreg) ~ WHITESPACE* ~ assign ~ WHITESPACE* ~ reg }

/// `LDR #IMM => vareg<.s>`
/// `LDR #IMM =| vareg<.s>`
/// `LDR &ZPA => vareg`
ldr = @{ ^"LDR" ~ WHITESPACE+ ~ (zpaload | immload) }

/// `LOAD constant => vareg`, where `constant` is an `integer`, a `float`, an `ident`, or a `const` (or a reference to it).
/// This expands to at least one LDR to load the value
load = @{ ^"LOAD" ~ WHITESPACE+ ~ (float | integer | ident | const) ~ WHITESPACE* ~ assign ~ WHITESPACE* ~ vareg }

zpaload = !{ zpgref ~ assign ~ vareg }
immload = !{ integer ~ assign ~ vareg ~ ("." ~ part)? }

part = ${ "0" | "1" }

assign    = ${ "=>" | "->" | "," }
volassign = ${ "=>>" | "->>" }
