WHITESPACE = _{ (" " | "\t")+ }
COMMENT    = _{ "//" ~ ANY }

// TODO: find out an easier way to fucking represent this shit

instruction = _{
    SOI ~ (controlop | integerop | floatop | registerop) ~ EOI
}

controlop = _{
    halt
  | nop
  | jmp
  | jsr
  | ret
  | jeq
  | jne
  | jgt
  | jlt
  | jge
  | jle
}

integerop = _{
    add
  | sub
  | mul
  | dvu
  | dvs
  | mod
  | and
  | ior
  | xor
  | not
  | sxt
  | bsl
  | bsr
  | asr
  | rol
  | ror
  | cmp
  | tst
}

floatop = _{
    fadd
  | fsub
  | fmul
  | fdiv
  | fmod
  | fcmp
  | fneg
  | frec
  | itof
  | ftoi
  | fchk
}

registerop = _{
    push
  | pop
  | lbr
  | sbr
  | lsr
  | ssr
  | llr
  | slr
  | tfr
  | ldr
}

ident = ${ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
label =  { ident ~ ":" }

byte  = ${ ^"byte" }
short = ${ ^"short" }
word  = ${ ^"word" }
type  = _{ byte | short | word }

vareg  = ${ (^"V" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')) }
stareg = ${ ^"SP" | ^"BP" }
lpreg  = ${ ^"LP" }
pcreg  = ${ ^"PC" }
psreg  = ${ ^"PS" }
fsreg  = ${ ^"FS" }
spreg  = _{ pcreg | psreg | fsreg }

reg = _{
    vareg
  | stareg
  | lpreg
}

dec   = ${ "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
hex   = ${ ^"0x" ~ ASCII_HEX_DIGIT+ }
oct   = ${ "0" ~ ASCII_OCT_DIGIT+ }
int   = ${ "#" ~ "-"? ~ (dec | hex | oct) }
uint  = ${ "#" ~ (dec | hex | oct) }
float = ${ "-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }

zpgaddr = ${ ASCII_HEX_DIGIT+ }

halt = ${ ^"HALT" }
nop  = ${ ^"NOP" }
jmp  = ${ ^"JMP" ~ WHITESPACE ~ jump }
jsr  = ${ ^"JSR" ~ WHITESPACE ~ jump }
ret  = ${ ^"RET" ~ WHITESPACE ~ jump }
jeq  = ${ ^"JEQ" ~ WHITESPACE ~ jump }
jne  = ${ ^"JNE" ~ WHITESPACE ~ jump }
jgt  = ${ ^"JGT" ~ WHITESPACE ~ jump }
jlt  = ${ ^"JLT" ~ WHITESPACE ~ jump }
jge  = ${ ^"JGE" ~ WHITESPACE ~ jump }
jle  = ${ ^"JLE" ~ WHITESPACE ~ jump }

jump     = _{ absolute | relative | label }
absolute =  { vareg }
relative =  { int }

add = ${ ^"ADD" ~ WHITESPACE ~ int_binop }
sub = ${ ^"SUB" ~ WHITESPACE ~ int_binop }
mul = ${ ^"MUL" ~ WHITESPACE ~ int_binop }
dvu = ${ ^"DVU" ~ WHITESPACE ~ int_binop }
dvs = ${ ^"DVS" ~ WHITESPACE ~ int_binop }
mod = ${ ^"MOD" ~ WHITESPACE ~ int_binop }
and = ${ ^"AND" ~ WHITESPACE ~ int_binop }
ior = ${ ^"IOR" ~ WHITESPACE ~ int_binop }
xor = ${ ^"XOR" ~ WHITESPACE ~ int_binop }
not = ${ ^"NOT" ~ WHITESPACE ~ int_unop }
sxt = ${ ^"SXT" ~ WHITESPACE ~ type ~ WHITESPACE ~ vareg }
bsl = ${ ^"BSL" ~ WHITESPACE ~ int_binop }
bsr = ${ ^"BSR" ~ WHITESPACE ~ int_binop }
asr = ${ ^"ASR" ~ WHITESPACE ~ int_binop }
rol = ${ ^"ROL" ~ WHITESPACE ~ int_binop }
ror = ${ ^"ROR" ~ WHITESPACE ~ int_binop }
cmp = ${ ^"CMP" ~ WHITESPACE ~ int_cmpop }
tst = ${ ^"TST" ~ WHITESPACE ~ int_cmpop }

int_binop = _{ vareg ~ "," ~ WHITESPACE? ~ (vareg | int) ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
int_unop  = _{ vareg ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
int_cmpop = _{ vareg ~ "," ~ WHITESPACE? ~ (vareg | int) }

fadd = ${ ^"FADD" ~ WHITESPACE ~ float_binop }
fsub = ${ ^"FSUB" ~ WHITESPACE ~ float_binop }
fmul = ${ ^"FMUL" ~ WHITESPACE ~ float_binop }
fdiv = ${ ^"FDIV" ~ WHITESPACE ~ float_binop }
fmod = ${ ^"FMOD" ~ WHITESPACE ~ float_binop }
fcmp = ${ ^"FCMP" ~ WHITESPACE ~ float_binop }
fneg = ${ ^"FNEG" ~ WHITESPACE ~ float_unop }
frec = ${ ^"FREC" ~ WHITESPACE ~ float_unop }
itof = ${ ^"ITOF" ~ WHITESPACE ~ float_unop }
ftoi = ${ ^"FTOI" ~ WHITESPACE ~ float_unop }
fchk = ${ ^"FCHK" ~ WHITESPACE ~ vareg }

float_binop = _{ vareg ~ WHITESPACE? ~ "," ~ WHITESPACE? ~ vareg ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
float_unop  = _{ vareg ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }

push = ${ ^"PUSH" ~ WHITESPACE? ~ (regstack | uint) }
pop  = ${ ^"POP" ~ WHITESPACE? ~ (regstack | uint) }

regstack = ${ "{" ~ WHITESPACE? ~ reg ~ (WHITESPACE? ~ "," ~ WHITESPACE? ~ reg)* ~ WHITESPACE? ~ "}" }

lbr = ${ ^"LBR" ~ WHITESPACE ~ load ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
sbr = ${ ^"SBR" ~ WHITESPACE ~ load ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
lsr = ${ ^"LSR" ~ WHITESPACE ~ load ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
ssr = ${ ^"SSR" ~ WHITESPACE ~ load ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
llr = ${ ^"LLR" ~ WHITESPACE ~ load ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }
slr = ${ ^"SLR" ~ WHITESPACE ~ load ~ WHITESPACE? ~ assign ~ WHITESPACE? ~ vareg }

load      = _{ ("@" ~ zpgaddr) | vareg | offsetind | indexind | stackoff }
offsetind = ${ vareg ~ WHITESPACE? ~ "+" ~ WHITESPACE? ~ int }
indexind  = ${ vareg ~ WHITESPACE? ~ "[" ~ WHITESPACE? ~ vareg ~ WHITESPACE? ~ "]" }
stackoff  = ${ "%" ~ int }

/// `TFT reg => reg`
tfr = { ^"TFR" ~ reg ~ assign ~ reg }

/// `LDR #IMM => vareg<.s>`
/// `LDR #IMM =| vareg<.s>`
/// `LDR &ZPA => vareg`
ldr = ${ ^"LDR" ~ WHITESPACE ~ (zpaload | immload) }

zpaload = !{ ("&" ~ zpgaddr) ~ assign ~ vareg }
immload = !{ int ~ (assign | insert) ~ vareg ~ ("." ~ part)? }

part = { "0" | "1" }

assign = { "=>" | "->" }
insert = { "=|" }
